{"version":3,"sources":["src/core/Keyboard/index.js","src/core/Mouse/index.js","src/core/AppContext/index.js","src/core/GameObject/index.js","node_modules/gl-matrix/esm/common.js","node_modules/gl-matrix/esm/mat2.js","node_modules/gl-matrix/esm/mat2d.js","node_modules/gl-matrix/esm/mat3.js","node_modules/gl-matrix/esm/mat4.js","node_modules/gl-matrix/esm/vec3.js","node_modules/gl-matrix/esm/vec4.js","node_modules/gl-matrix/esm/quat.js","node_modules/gl-matrix/esm/quat2.js","node_modules/gl-matrix/esm/vec2.js","node_modules/gl-matrix/esm/index.js","src/models/Model/index.js","src/models/primitives/Cylinder/index.js","src/core/shaders/VertexShader/index.js","src/core/shaders/FragmentShader/index.js","src/gameObjects/Coin/index.js","src/core/Scene/index.js","src/core/Camera/index.js","src/core/Texture/index.js","src/core/ControlScript/index.js","src/interpolators/Interpolator/index.js","src/interpolators/SerialInterpolatorSet/index.js","src/interpolators/ParallelInterpolatorSet/index.js","src/scripts/ControlCoin/animations.js","src/scripts/ControlCoin/index.js","src/models/Table/index.js","src/gameObjects/Table/index.js","src/UI/components/ResultMessage/index.js","src/UI/components/ClickPrompt/index.js","src/UI/components/ControlInfo/index.js","src/UI/index.js","src/scripts/ControlCamera/index.js","src/index.js"],"names":["Keyboard","constructor","__keysMap","__reset","bind","__onKeyUp","__onKeyDown","window","addEventListener","e","key","isKeyPressed","destroy","removeEventListener","__resetKeys","Mouse","BUTTONS","__onMouseDown","__onMouseUp","__onMouseMove","__onWheel","isButtonPressed","button","__buttonsMap","getPosition","x","__x","y","__y","getMovement","__dx","__dy","getScroll","__dWheelX","__dWheelY","z","__dWheelZ","unit","__wheelUnit","isDragging","__dragging","clientX","clientY","movementX","movementY","deltaX","deltaY","deltaZ","deltaMode","update","AppContext","DEFAULT_INPUT_OPTIONS","keyboard","mouse","canvas","options","gl","getContext","console","warn","alert","Error","__state","__drawDoneTime","__deltaTime","__setupInputs","input","inputOptions","__input","undefined","notifyUpdating","performance","now","notifyUpdateDone","notifyDrawing","notifyDrawDone","state","deltaTime","createVertexShader","source","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","createFragmentShader","fragmentShader","FRAGMENT_SHADER","GameObject","context","position","scale","rotation","__controlScripts","addControlScript","name","script","getControlScript","setScene","scene","_setModel","model","__model","draw","mView","mProj","prepareDraw","Object","keys","forEach","EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","setMatrixArrayType","type","degree","PI","toRadian","a","equals","b","abs","max","create","out","glMatrix","clone","copy","identity","fromValues","m00","m01","m10","m11","set","transpose","a1","invert","a0","a2","a3","det","adjoint","determinant","multiply","b0","b1","b2","b3","rotate","rad","s","sin","c","cos","v","v0","v1","fromRotation","fromScaling","str","frob","sqrt","pow","LDU","L","D","U","add","subtract","exactEquals","multiplyScalar","multiplyScalarAndAdd","mul","sub","d","tx","ty","aa","ab","ac","ad","atx","aty","a4","a5","b4","b5","translate","fromTranslation","fromMat4","m02","m12","m20","m21","m22","a01","a02","a12","a00","a10","a11","a20","a21","a22","b01","b11","b21","b00","b02","b10","b12","b20","b22","fromMat2d","fromQuat","q","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","width","height","a6","a7","a8","b6","b7","b8","m03","m13","m23","m30","m31","m32","m33","axis","t","len","rotateX","rotateY","rotateZ","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","o","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","target","a9","a14","a15","b9","b13","b14","b15","length","divide","ceil","floor","min","round","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","dot","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","r","zScale","transformMat4","m","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","p","angle","tempA","tempB","cosine","acos","zero","div","dist","sqrDist","sqrLen","vec","stride","offset","count","fn","arg","i","l","u","A","B","C","E","F","G","H","I","J","v2","v3","v4","s1","s2","ix","iy","iz","iw","setAxisAngle","getAxisAngle","out_axis","calculateW","slerp","omega","cosom","sinom","scale0","scale1","u1","u2","u3","sqrt1MinusU1","sqrtU1","invDot","conjugate","fromMat3","fTrace","fRoot","j","k","fromEuler","halfToRad","cx","cy","cz","vec4","rotationTo","tmpvec3","vec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","setAxes","matr","mat3","view","dq","w1","fromRotationTranslationValues","outer","quat","mat4","getReal","getDual","setReal","setDual","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","rotateByQuatAppend","rotateByQuatPrepend","rotateAroundAxis","axisLength","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","mt","sqlen","a_dot_b","transformMat2","transformMat2d","p0","p1","sinC","cosC","len1","len2","Model","initialize","program","createProgram","attachShader","location","__linkAndValidate","__attribLocations","mWorld","getUniformLocation","_createBuffer","data","bufferObject","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","_createElementBuffer","ELEMENT_ARRAY_BUFFER","Uint16Array","useProgram","rotationQuat","mRotate","mScale","mTranslate","uniformMatrix4fv","FALSE","deleteProgram","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","validateProgram","VALIDATE_STATUS","Cylinder","attribLocations","vertPosition","getAttribLocation","texCoord","initializeProperties","radius","slices","setTexture","texture","generateVertices","halfLength","step","buffer","push","bodyLength","topStart","topLength","bottomStart","bottomSlices","bodyStart","bottomLength","vertexAttribPointer","FLOAT","BYTES_PER_ELEMENT","enableVertexAttribArray","bindTexture","TEXTURE_2D","activeTexture","TEXTURE0","drawArrays","TRIANGLE_STRIP","TRIANGLE_FAN","VertexShader","src","__compile","FragmentShader","Coin","thickness","detail","vertexShaderSrc","fragmentShaderSrc","textureImage","Scene","__clearColor","__gameObjects","enable","DEPTH_TEST","CULL_FACE","frontFace","CCW","cullFace","BACK","__drawGameObject","__updateGameObject","setClearColor","clearColor","addGameObject","gameObject","__sceneIndex","removeGameObject","index","splice","setCamera","camera","__camera","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","viewMat","projMat","Camera","__viewMatrix","__projection","__fov","__focus","__lookAtPosition","__ratio","setPosition","setAspectRatio","ratio","stopLookAt","setFieldOfView","setFocus","from","Texture","setImage","image","channels","tile","__tile","__channels","__prepare","loadImage","url","document","createElement","onload","__location","RGBA","RGB","createTexture","wrap","REPEAT","CLAMP_TO_EDGE","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_MAG_FILTER","texImage2D","UNSIGNED_BYTE","ControlScript","Interpolator","to","duration","easingFn","EASING","__from","isArray","__to","__duration","__remaining","__easingFn","__done","reverse","reset","done","elapsed","map","val","IN","QUAD","CUBIC","QUART","QUINT","SINE","EXPO","CIRC","ELASTIC","asin","OUT","IN_OUT","SerialInterpolatorSet","interpolators","__items","__currentIdx","item","lastItem","currentItem","ParallelInterpolatorSet","allDone","vals","flipAnimation","endAngle","startY","midY","endY","jump","slowJump","stall","jumpAnim","slowFlip","flip","endFlip","flipAnim","ControlCoin","__flipping","__flipAnimation","__flipResult","__onFlipEnd","onFlipStart","callback","__onFlipStart","onFlipEnd","startFlipping","heads","tails","pos","rot","Table","breadth","legHeight","legWidth","legBreadth","legBreadh","generateLegVertices","halfBaseHeight","halfBaseWidth","halfBaseBreadth","indexOffset","halfHeight","halfWidth","halfBreadth","leg1","generateOneLegVertices","leg2","leg3","leg4","vertices","indices","legNumber","tz","numVertices","idx","baseHeight","baseWidth","baseBreadth","legData","drawElements","TRIANGLES","UNSIGNED_SHORT","TableModel","ResultMessage","template","innerHTML","HTMLElement","observedAttributes","_shadowRoot","attachShadow","mode","appendChild","content","cloneNode","$root","querySelector","$result","connectedCallback","_render","attributeChangedCallback","oldValue","newValue","_result","result","getAttribute","value","setAttribute","resultText","innerText","classList","remove","customElements","define","ClickPrompt","ControlInfo","arrowSvg","mouseSvg","UI","__initialize","__sizeOverlay","resetResultMessage","overlay","id","message","clickPrompt","body","__overlay","__message","__clickPrompt","showControlInfo","style","innerWidth","innerHeight","showClickPrompt","displayResultMessage","__messageTimeout","clearTimeout","setTimeout","controlInfo","ControlCamera","startRadius","startAngleHorz","__center","__radius","__angleHorz","scroll","delta","main","ui","getElementById","setupScene","coin","createCoin","table","createTable","loop","requestAnimationFrame","flipScript"],"mappings":"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","file":"src.28665f36.js","sourceRoot":"..","sourcesContent":["class Keyboard {\n  constructor () {\n    this.__keysMap = {}\n    this.__reset = this.__reset.bind(this)\n    this.__onKeyUp = this.__onKeyUp.bind(this)\n    this.__onKeyDown = this.__onKeyDown.bind(this)\n    window.addEventListener('blur', this.__reset)\n    window.addEventListener('keydown', this.__onKeyDown)\n    window.addEventListener('keyup', this.__onKeyUp)\n  }\n\n  __onKeyDown (e) {\n    this.__keysMap[e.key] = true\n  }\n\n  __onKeyUp (e) {\n    this.__keysMap[e.key] = false\n  }\n\n  __reset () {\n    this.__keysMap = {}\n  }\n\n  isKeyPressed (key) {\n    return this.__keysMap[key] || false\n  }\n\n  destroy () {\n    window.removeEventListener('blur', this.__resetKeys)\n    window.removeEventListener('keydown', this.__onKeyDown)\n    window.removeEventListener('keyup', this.__onKeyUp)\n  }\n}\n\nexport default Keyboard\n","const BUTTONS = ['left', 'wheel', 'right', 'back', 'forward']\n\nclass Mouse {\n  constructor () {\n    this.__onMouseDown = this.__onMouseDown.bind(this)\n    this.__onMouseUp = this.__onMouseUp.bind(this)\n    this.__onMouseMove = this.__onMouseMove.bind(this)\n    this.__onWheel = this.__onWheel.bind(this)\n    this.__reset = this.__reset.bind(this)\n\n    this.__reset()\n\n    window.addEventListener('mousedown', this.__onMouseDown)\n    window.addEventListener('mouseup', this.__onMouseUp)\n    window.addEventListener('mousemove', this.__onMouseMove)\n    window.addEventListener('wheel', this.__onWheel)\n    window.addEventListener('blur', this.__reset)\n  }\n\n  isButtonPressed (button) {\n    return this.__buttonsMap[button] || false\n  }\n\n  getPosition () {\n    return { x: this.__x, y: this.__y }\n  }\n\n  getMovement () {\n    return {\n      x: this.__dx,\n      y: this.__dy\n    }\n  }\n\n  getScroll () {\n    return {\n      x: this.__dWheelX,\n      y: this.__dWheelY,\n      z: this.__dWheelZ,\n      unit: this.__wheelUnit\n    }\n  }\n\n  isDragging () {\n    return this.__dragging\n  }\n\n  __onMouseDown (e) {\n    this.__buttonsMap = { [BUTTONS[e.button]]: true }\n    this.__onMouseMove(e)\n  }\n\n  __onMouseUp (e) {\n    this.__buttonsMap = { [BUTTONS[e.button]]: false }\n    this.__onMouseMove(e)\n  }\n\n  __onMouseMove (e) {\n    this.__x = e.clientX\n    this.__y = e.clientY\n    this.__dx = e.movementX\n    this.__dy = e.movementY\n    this.__dragging = this.__buttonsMap['left'] || false\n  }\n\n  __onWheel (e) {\n    this.__dWheelX = e.deltaX\n    this.__dWheelY = e.deltaY\n    this.__dWheelZ = e.deltaZ\n    this.__wheelUnit = e.deltaMode\n  }\n\n  update () {\n    this.__dx = 0\n    this.__dy = 0\n    this.__dWheelX = 0\n    this.__dWheelY = 0\n    this.__dWheelZ = 0\n    this.__wheelUnit = 0\n  }\n\n  __reset () {\n    this.__x = 0\n    this.__y = 0\n    this.__dx = 0\n    this.__dy = 0\n    this.__dWheelX = 0\n    this.__dWheelY = 0\n    this.__dWheelZ = 0\n    this.__wheelUnit = 0\n    this.__dragging = false\n    this.__buttonsMap = {}\n  }\n\n  destroy () {\n    window.removeEventListener('mousedown', this.__onMouseDown)\n    window.removeEventListener('mouseup', this.__onMouseUp)\n    window.removeEventListener('mousemove', this.__onMouseMove)\n    window.removeEventListener('blur', this.__reset)\n  }\n}\n\nexport default Mouse\n","import Keyboard from '../Keyboard'\nimport Mouse from '../Mouse'\n\nconst DEFAULT_INPUT_OPTIONS = { keyboard: true, mouse: true }\n\nclass AppContext {\n  constructor (canvas, options = {}) {\n    this.canvas = canvas\n    let gl = canvas.getContext('webgl')\n    if (!gl) {\n      console.warn('WebGL not supported. Trying to use experimental webgl')\n      gl = canvas.getContext('experimental-webgl')\n    }\n    if (!gl) {\n      window.alert('Your browser does not support WebGL and 3D magic')\n      throw new Error('Your browser does not support WebGL and 3D magic')\n    }\n    this.gl = gl\n    this.__state = 'initializing'\n    this.__drawDoneTime = 0\n    this.__deltaTime = 0\n    this.__setupInputs({ ...options.input, ...DEFAULT_INPUT_OPTIONS })\n  }\n\n  __setupInputs (inputOptions) {\n    this.__input = {\n      keyboard: inputOptions.keyboard ? new Keyboard() : undefined,\n      mouse: inputOptions.mouse ? new Mouse() : undefined\n    }\n  }\n\n  notifyUpdating () {\n    this.__deltaTime = window.performance.now() - this.__drawDoneTime\n    this.__state = 'updating'\n  }\n\n  notifyUpdateDone () {\n    this.__state = 'updated'\n    if (this.__input.mouse) {\n      this.__input.mouse.update()\n    }\n  }\n\n  notifyDrawing () {\n    this.__state = 'drawing'\n  }\n\n  notifyDrawDone () {\n    this.__state = 'drawn'\n    this.__drawDoneTime = window.performance.now()\n  }\n\n  get input () {\n    return { ...this.__input }\n  }\n\n  get state () {\n    return this.__state\n  }\n\n  get deltaTime () {\n    return this.__deltaTime\n  }\n\n  createVertexShader (source) {\n    const { gl } = this\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER)\n    gl.shaderSource(vertexShader, source)\n    gl.compileShader(vertexShader)\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      throw new Error(`Error compiling vertex shader ${gl.getShaderInfoLog(vertexShader)}`)\n    }\n    return vertexShader\n  }\n\n  createFragmentShader (source) {\n    const { gl } = this\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)\n    gl.shaderSource(fragmentShader, source)\n    gl.compileShader(fragmentShader)\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      throw new Error(`Error compiling fragment shader ${gl.getShaderInfoLog(fragmentShader)}`)\n    }\n    return fragmentShader\n  }\n}\n\nexport default AppContext\n","class GameObject {\n  constructor (context) {\n    this.context = context\n    this.position = { x: 0, y: 0, z: 0 }\n    this.scale = { x: 1, y: 1, z: 1 }\n    this.rotation = { x: 0, y: 0, z: 0 }\n    this.__controlScripts = {}\n  }\n\n  addControlScript (name, script) {\n    this.__controlScripts[name] = script\n  }\n\n  getControlScript (name) {\n    return this.__controlScripts[name]\n  }\n\n  setScene (scene) {\n    this.scene = scene\n  }\n\n  _setModel (model) {\n    this.__model = model\n  }\n\n  draw (mView, mProj) {\n    if (this.__model) {\n      this.__model.prepareDraw(\n        this.position,\n        this.rotation,\n        this.scale,\n        mView,\n        mProj\n      )\n      this.__model.draw()\n    }\n  }\n\n  update () {\n    const { __controlScripts } = this\n    Object.keys(__controlScripts).forEach(name => {\n      __controlScripts[name].update(this, this.context)\n    })\n  }\n\n  destroy () {\n    if (this.__model) this.__model.destroy()\n  }\n}\n\nexport default GameObject\n","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\n\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {mat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\n\nexport function fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\n\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {mat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {mat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {mat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2));\n}\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {mat2} L the lower triangular matrix\r\n * @param {mat2} D the diagonal matrix\r\n * @param {mat2} U the upper triangular matrix\r\n * @param {mat2} a the input matrix to factorize\r\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\r\n * Adds two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n *\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty,\r\n *  0, 0, 1]\r\n * </pre>\r\n * The last row is ignored so the array is shorter and operations are faster.\r\n */\n\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(6);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {mat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\n\nexport function fromValues(a, b, c, d, tx, ty) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\n\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {mat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\r\n * Multiplies two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {mat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {mat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1);\n}\n/**\r\n * Adds two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\r\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n;\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n;\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {vec4} result the receiving vector\r\n * @param {vec4} U the first vector\r\n * @param {vec4} V the second vector\r\n * @param {vec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n;\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport var length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n/**\r\n * Dual Quaternion<br>\r\n * Format: [real, dual]<br>\r\n * Quaternion format: XYZW<br>\r\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\r\n * @module quat2\r\n */\n\n/**\r\n * Creates a new identity dual quat\r\n *\r\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\r\n */\n\nexport function create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat2} a dual quaternion to clone\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\r\n * Creates a new dual quat initialized with the given values\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\r\n * Creates a new dual quat from the given values (quat and translation)\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component (translation)\r\n * @param {Number} y2 Y component (translation)\r\n * @param {Number} z2 Z component (translation)\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\r\n * Creates a dual quat from a quaternion and a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q quaternion\r\n * @param {vec3} t tranlation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Creates a dual quat from a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {vec3} t translation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a dual quat from a quaternion\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q the quaternion\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a new dual quat from a matrix (4x4)\r\n *\r\n * @param {quat2} out the dual quaternion\r\n * @param {mat4} a the matrix\r\n * @returns {quat2} dual quat receiving operation result\r\n * @function\r\n */\n\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\r\n * Copy the values from one dual quat to another\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the source dual quaternion\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Set a dual quat to the identity dual quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @returns {quat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Set the components of a dual quat to the given values\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\r\n * Gets the real part of a dual quat\r\n * @param  {quat} out real part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} real part\r\n */\n\nexport var getReal = quat.copy;\n/**\r\n * Gets the dual part of a dual quat\r\n * @param  {quat} out dual part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} dual part\r\n */\n\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\r\n * Set the real component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the real part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport var setReal = quat.copy;\n/**\r\n * Set the dual component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the dual part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\r\n * Gets the translation of a normalized dual quat\r\n * @param  {vec3} out translation\r\n * @param  {quat2} a Dual Quaternion to be decomposed\r\n * @return {vec3} translation\r\n */\n\nexport function getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\r\n * Translates a dual quat by the given vector\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {quat2} out\r\n */\n\nexport function translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the X axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Y axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Z axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (a * q)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {quat} q quaternion to rotate by\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (q * a)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat} q quaternion to rotate by\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around a given axis. Does the normalisation automatically\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {vec3} axis the axis to rotate around\r\n * @param {Number} rad how far the rotation should be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Adds two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\r\n * Multiplies two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\r\n * Alias for {@link quat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a dual quat by a scalar number\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the dual quat to scale\r\n * @param {Number} b amount to scale the dual quat by\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\r\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\r\n *\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = quat.dot;\n/**\r\n * Performs a linear interpolation between two dual quats's\r\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\r\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quat to calculate inverse of\r\n * @returns {quat2} out\r\n */\n\nexport function invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a dual quat\r\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat2} a quat to calculate conjugate of\r\n * @returns {quat2} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Calculates the length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate length of\r\n * @returns {Number} length of a\r\n * @function\r\n */\n\nexport var length = quat.length;\n/**\r\n * Alias for {@link quat2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = quat.squaredLength;\n/**\r\n * Alias for {@link quat2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a dual quat\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quaternion to normalize\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\r\n * Returns a string representation of a dual quatenion\r\n *\r\n * @param {quat2} a dual quaternion to represent as a string\r\n * @returns {String} string representation of the dual quat\r\n */\n\nexport function str(a) {\n  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';\n}\n/**\r\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat2} a the first dual quaternion.\r\n * @param {quat2} b the second dual quaternion.\r\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\r\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat2} a the first dual quat.\r\n * @param {quat2} b the second dual quat.\r\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(c),\n      cosC = Math.cos(c); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1];\n  var len1 = x1 * x1 + y1 * y1;\n\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n\n  var len2 = x2 * x2 + y2 * y2;\n\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat2 from \"./mat2.js\";\nimport * as mat2d from \"./mat2d.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as mat4 from \"./mat4.js\";\nimport * as quat from \"./quat.js\";\nimport * as quat2 from \"./quat2.js\";\nimport * as vec2 from \"./vec2.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };","import { mat4, quat } from 'gl-matrix'\n\nclass Model {\n  constructor (context) {\n    this.context = context\n    this.gl = context.gl\n  }\n\n  initialize (vertexShader, fragmentShader) {\n    const { gl } = this\n    this.program = gl.createProgram()\n    gl.attachShader(this.program, vertexShader.location)\n    gl.attachShader(this.program, fragmentShader.location)\n    this.__linkAndValidate()\n    this.__attribLocations = {\n      mWorld: gl.getUniformLocation(this.program, 'mWorld'),\n      mView: gl.getUniformLocation(this.program, 'mView'),\n      mProj: gl.getUniformLocation(this.program, 'mProj')\n    }\n  }\n\n  _createBuffer (data) {\n    const { gl } = this\n    const bufferObject = gl.createBuffer()\n    gl.bindBuffer(gl.ARRAY_BUFFER, bufferObject)\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW)\n  }\n\n  _createElementBuffer (data) {\n    const { gl } = this\n    const bufferObject = gl.createBuffer()\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferObject)\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(data), gl.STATIC_DRAW)\n  }\n\n  prepareDraw (position, rotation, scale, mView, mProj) {\n    const { gl } = this\n    gl.useProgram(this.program)\n    const mWorld = new Float32Array(16)\n    const rotationQuat = new Float32Array(9)\n    quat.fromEuler(rotationQuat, rotation.x, rotation.y, rotation.z)\n\n    const mRotate = new Float32Array(16)\n    const mScale = new Float32Array(16)\n    const mTranslate = new Float32Array(16)\n\n    mat4.fromTranslation(mTranslate, [position.x, position.y, position.z])\n    mat4.fromScaling(mScale, [scale.x, scale.y, scale.z])\n    mat4.fromQuat(mRotate, rotationQuat)\n\n    mat4.multiply(mWorld, mTranslate, mRotate)\n    mat4.multiply(mWorld, mWorld, mScale)\n\n    gl.uniformMatrix4fv(this.__attribLocations.mWorld, gl.FALSE, mWorld)\n    gl.uniformMatrix4fv(this.__attribLocations.mView, gl.FALSE, mView)\n    gl.uniformMatrix4fv(this.__attribLocations.mProj, gl.FALSE, mProj)\n  }\n\n  destroy () {\n    this.gl.deleteProgram(this.program)\n  }\n\n  __linkAndValidate () {\n    const { program, gl } = this\n    gl.linkProgram(program)\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      throw new Error(`Error linking program ${gl.getProgramInfoLog(program)}`)\n    }\n    gl.validateProgram(program)\n    if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {\n      throw new Error(`Error validating program ${gl.getProgramInfoLog(program)}`)\n    }\n  }\n}\n\nexport default Model\n","import Model from '../../Model'\n\nclass Cylinder extends Model {\n  initialize (vertexShader, fragmentShader) {\n    super.initialize(vertexShader, fragmentShader)\n    const { gl } = this\n    this.attribLocations = {\n      vertPosition: gl.getAttribLocation(this.program, 'vertPosition'),\n      texCoord: gl.getAttribLocation(this.program, 'texCoord')\n    }\n  }\n\n  initializeProperties (radius, height, slices) {\n    this.radius = radius\n    this.height = height\n    this.slices = slices\n  }\n\n  setTexture (texture) {\n    this.texture = texture\n  }\n\n  generateVertices (radius = 0.8, height = 1, slices = 10) {\n    const halfLength = height / 2\n    const step = Math.PI * 2.0 / slices\n    const buffer = []\n    const bodyStart = 0\n    let i = 0\n    for (i = 0; i < slices + 1; ++i) {\n      const a = -(step * i)\n      const x = Math.cos(a) * radius\n      const z = Math.sin(a) * radius\n\n      buffer.push(x)\n      buffer.push(halfLength)\n      buffer.push(z)\n      buffer.push(0.2)\n      buffer.push(0.2)\n\n      buffer.push(x)\n      buffer.push(-halfLength)\n      buffer.push(z)\n      buffer.push(0.2)\n      buffer.push(0.2)\n    }\n    const bodyLength = i * 2\n    const topStart = bodyLength\n\n    buffer.push(0)\n    buffer.push(halfLength)\n    buffer.push(0)\n    buffer.push(0.25)\n    buffer.push(0.5)\n\n    for (i = 0; i < slices + 2; ++i) {\n      const a = -(step * i)\n      const x = Math.cos(a) * radius\n      const z = Math.sin(a) * radius\n\n      const b = a - Math.PI\n      const u = (Math.cos(b) + 1) / 4\n      const v = (Math.sin(b) + 1) / 2\n\n      buffer.push(x)\n      buffer.push(halfLength)\n      buffer.push(z)\n      buffer.push(u)\n      buffer.push(v)\n    }\n\n    const topLength = i\n\n    buffer.push(0)\n    buffer.push(-halfLength)\n    buffer.push(0)\n    buffer.push(0.75)\n    buffer.push(0.5)\n\n    const bottomStart = topStart + topLength + 1\n\n    const bottomSlices = slices + 1\n    for (let i = 0; i < bottomSlices; ++i) {\n      const a = -(step * (bottomSlices - i))\n      const x = Math.cos(a) * radius\n      const z = Math.sin(a) * radius\n\n      const b = a - Math.PI\n      const u = (Math.cos(b) + 1) / 4 + 0.5\n      const v = (Math.sin(b) + 1) / 2\n\n      buffer.push(x)\n      buffer.push(-halfLength)\n      buffer.push(z)\n      buffer.push(u)\n      buffer.push(v)\n    }\n\n    const bottomLength = i\n\n    return {\n      buffer: buffer,\n      bodyStart,\n      bodyLength,\n      topStart,\n      topLength,\n      bottomStart,\n      bottomLength\n    }\n  }\n\n  draw () {\n    const { gl } = this\n    const slices = this.slices || 10\n    const radius = this.radius || 0.8\n    const height = this.height || 1\n    const {\n      buffer,\n      bodyStart,\n      bodyLength,\n      topStart,\n      topLength,\n      bottomStart,\n      bottomLength\n    } = this.generateVertices(radius, height, slices)\n    this._createBuffer(buffer)\n\n    gl.vertexAttribPointer(\n      this.attribLocations.vertPosition,\n      3,\n      gl.FLOAT,\n      gl.FALSE,\n      5 * Float32Array.BYTES_PER_ELEMENT,\n      0\n    )\n    gl.vertexAttribPointer(\n      this.attribLocations.texCoord,\n      2,\n      gl.FLOAT,\n      gl.FALSE,\n      5 * Float32Array.BYTES_PER_ELEMENT,\n      3 * Float32Array.BYTES_PER_ELEMENT\n    )\n    gl.enableVertexAttribArray(this.attribLocations.vertPosition)\n    gl.enableVertexAttribArray(this.attribLocations.texCoord)\n    gl.bindTexture(gl.TEXTURE_2D, this.texture.location)\n    gl.activeTexture(gl.TEXTURE0)\n    gl.drawArrays(gl.TRIANGLE_STRIP, bodyStart, bodyLength)\n    gl.drawArrays(gl.TRIANGLE_FAN, topStart, topLength)\n    gl.drawArrays(gl.TRIANGLE_FAN, bottomStart, bottomLength)\n  }\n}\n\nexport default Cylinder\n","class VertexShader {\n  constructor (context, src) {\n    this.__compile(context.gl, src)\n  }\n\n  __compile (gl, source) {\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER)\n    gl.shaderSource(vertexShader, source)\n    gl.compileShader(vertexShader)\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      throw new Error(`Error compiling vertex shader ${gl.getShaderInfoLog(vertexShader)}`)\n    }\n    this.location = vertexShader\n  }\n}\n\nexport default VertexShader\n","class FragmentShader {\n  constructor (context, src) {\n    this.__compile(context.gl, src)\n  }\n\n  __compile (gl, source) {\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)\n    gl.shaderSource(fragmentShader, source)\n    gl.compileShader(fragmentShader)\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      throw new Error(`Error compiling fragment shader ${gl.getShaderInfoLog(fragmentShader)}`)\n    }\n    this.location = fragmentShader\n  }\n}\n\nexport default FragmentShader\n","import GameObject from '../../core/GameObject'\nimport Cylinder from '../../models/primitives/Cylinder'\nimport VertexShader from '../../core/shaders/VertexShader'\nimport FragmentShader from '../../core/shaders/FragmentShader'\nimport vertexShaderSrc from './shader.vert'\nimport fragmentShaderSrc from './shader.frag'\n\nclass Coin extends GameObject {\n  initialize (radius, thickness, detail = 20) {\n    const vertexShader = new VertexShader(this.context, vertexShaderSrc)\n    const fragmentShader = new FragmentShader(this.context, fragmentShaderSrc)\n    const model = new Cylinder(this.context)\n    model.initialize(vertexShader, fragmentShader)\n    model.initializeProperties(radius, thickness, detail)\n    this._setModel(model)\n  }\n\n  setTexture (textureImage) {\n    this.__model.setTexture(textureImage)\n  }\n}\n\nexport default Coin\n","class Scene {\n  constructor (context) {\n    const { gl } = context\n    this.context = context\n    this.__clearColor = [1.0, 1.0, 1.0, 1.0]\n    this.__gameObjects = []\n    gl.enable(gl.DEPTH_TEST)\n    gl.enable(gl.CULL_FACE)\n    gl.frontFace(gl.CCW)\n    gl.cullFace(gl.BACK)\n\n    this.__drawGameObject = this.__drawGameObject.bind(this)\n    this.__updateGameObject = this.__updateGameObject.bind(this)\n  }\n\n  setClearColor (clearColor) {\n    this.context.gl.clearColor(clearColor[0], clearColor[1], clearColor[2], clearColor[3])\n    this.__clearColor = clearColor\n  }\n\n  addGameObject (gameObject) {\n    const { __gameObjects } = this\n    gameObject.setScene(this)\n    gameObject.__sceneIndex = __gameObjects.length\n    __gameObjects.push(gameObject)\n  }\n\n  removeGameObject (gameObject) {\n    const index = gameObject.__sceneIndex\n    if (index !== undefined) {\n      this.__gameObjects.splice(index, 1)\n    }\n  }\n\n  setCamera (camera) {\n    this.__camera = camera\n  }\n\n  get camera () {\n    return this.__camera\n  }\n\n  get height () {\n    return this.context.canvas.height\n  }\n\n  get width () {\n    return this.context.canvas.width\n  }\n\n  update () {\n    this.context.notifyUpdating()\n    this.__camera.update()\n    this.__gameObjects.forEach(this.__updateGameObject)\n    this.context.notifyUpdateDone()\n  }\n\n  draw () {\n    this.context.notifyDrawing()\n    const { context: { gl } } = this\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n    this.__gameObjects.forEach(this.__drawGameObject)\n    this.context.notifyDrawDone()\n  }\n\n  __updateGameObject (gameObject) {\n    gameObject.update()\n  }\n\n  __drawGameObject (gameObject) {\n    gameObject.draw(this.__camera.viewMat, this.__camera.projMat)\n  }\n}\n\nexport default Scene\n","import { mat4, glMatrix, quat } from 'gl-matrix'\nimport GameObject from '../GameObject'\n\nclass Camera extends GameObject {\n  constructor (context) {\n    super(context)\n    this.__viewMatrix = new Float32Array(16)\n    this.__projection = new Float32Array(16)\n    this.__fov = glMatrix.toRadian(45)\n    this.__focus = [0.1, 4000]\n    this.__lookAtPosition = null\n    this.__ratio = 16 / 9\n  }\n\n  setPosition ([x, y, z]) {\n    this.position = { x, y, z }\n  }\n\n  setAspectRatio (ratio) {\n    this.__ratio = ratio\n  }\n\n  stopLookAt () {\n    this.__lookAtPosition = null\n  }\n\n  lookAt (position) {\n    this.__lookAtPosition = position\n  }\n\n  setFieldOfView (fov) {\n    this.__fov = glMatrix.toRadian(fov)\n  }\n\n  setFocus (near, far) {\n    this.__focus = [near, far]\n  }\n\n  get viewMat () {\n    const from = [this.position.x, this.position.y, this.position.z]\n    if (this.__lookAtPosition) {\n      mat4.lookAt(\n        this.__viewMatrix,\n        from,\n        this.__lookAtPosition,\n        [0, 1, 0]\n      )\n    } else {\n      const { position, rotation, scale } = this\n      const rotationQuat = new Float32Array(9)\n      quat.fromEuler(rotationQuat, rotation.x, rotation.y, rotation.z)\n\n      const mRotate = new Float32Array(16)\n      const mScale = new Float32Array(16)\n      const mTranslate = new Float32Array(16)\n\n      mat4.fromTranslation(mTranslate, [position.x, position.y, position.z])\n      mat4.fromScaling(mScale, [scale.x, scale.y, scale.z])\n      mat4.fromQuat(mRotate, rotationQuat)\n\n      mat4.multiply(this.__viewMatrix, mTranslate, mRotate)\n      mat4.multiply(this.__viewMatrix, this.__viewMatrix, mScale)\n      mat4.invert(this.__viewMatrix, this.__viewMatrix)\n    }\n    return this.__viewMatrix\n  }\n\n  get projMat () {\n    mat4.perspective(\n      this.__projection,\n      this.__fov,\n      this.__ratio,\n      this.__focus[0],\n      this.__focus[1]\n    )\n    return this.__projection\n  }\n}\n\nexport default Camera\n","class Texture {\n  constructor (context) {\n    this.gl = context.gl\n  }\n\n  setImage (image, channels = 3, tile = false) {\n    this.__tile = tile\n    this.__channels = channels\n    this.__prepare(image)\n  }\n\n  loadImage (url, channels = 3, tile = false) {\n    this.__tile = tile\n    this.__channels = 3\n    const image = document.createElement('img')\n    image.onload = () => {\n      this.__prepare(image)\n    }\n    image.src = url\n  }\n\n  get location () {\n    return this.__location\n  }\n\n  __prepare (image) {\n    const { gl } = this\n    const channels = this.__channels === 4 ? gl.RGBA : gl.RGB\n    this.__location = gl.createTexture()\n    gl.bindTexture(gl.TEXTURE_2D, this.__location)\n    const wrap = this.__tile ? gl.REPEAT : gl.CLAMP_TO_EDGE\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrap)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrap)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)\n\n    gl.texImage2D(gl.TEXTURE_2D, 0, channels, channels, gl.UNSIGNED_BYTE, image)\n\n    gl.bindTexture(gl.TEXTURE_2D, null)\n  }\n}\n\nexport default Texture\n","class ControlScript {\n  update (gameObject, context) {}\n}\n\nexport default ControlScript\n","class Interpolator {\n  constructor (from, to, duration, easingFn = Interpolator.EASING.LINEAR) {\n    this.__from = Array.isArray(from) ? from : [from]\n    this.__to = Array.isArray(to) ? to : [to]\n    this.__duration = duration\n    this.__remaining = duration\n    this.__easingFn = easingFn\n    this.__done = false\n  }\n\n  clone (easingFn = this.__easingFn) {\n    return new Interpolator(this.__from, this.__to, this.__duration, easingFn)\n  }\n\n  reverse (easingFn = this.__easingFn) {\n    return new Interpolator(this.__to, this.__from, this.__duration, easingFn)\n  }\n\n  reset () {\n    this.__remaining = this.__duration\n    this.__done = false\n  }\n\n  get done () {\n    return this.__done\n  }\n\n  update (deltaTime) {\n    const { __from, __to } = this\n    if (this.__done) return this.__to\n    const elapsed = this.__duration - this.__remaining\n    this.__remaining = this.__remaining - deltaTime\n    if (this.__remaining <= 0) {\n      this.__done = true\n      return this.__to\n    }\n    const value = elapsed\n      ? __from.map((val, index) => {\n        return this.__easingFn(elapsed, val, __to[index] - val, this.__duration)\n      })\n      : this.__from\n    return value\n  }\n}\n\n// REFERENCE: https://github.com/danro/jquery-easing/blob/master/jquery.easing.js\nInterpolator.EASING = {\n  LINEAR (t, b, c, d) {\n    return b + (t / d * c)\n  },\n\n  IN: {\n    QUAD (t, b, c, d) {\n      return c * (t /= d) * t + b\n    },\n\n    CUBIC (t, b, c, d) {\n      return c * (t /= d) * t * t + b\n    },\n\n    QUART (t, b, c, d) {\n      return c * (t /= d) * t * t * t + b\n    },\n\n    QUINT (t, b, c, d) {\n      return c * (t /= d) * t * t * t * t + b\n    },\n\n    SINE (t, b, c, d) {\n      return -c * Math.cos(t / d * (Math.PI / 2)) + c + b\n    },\n\n    EXPO (t, b, c, d) {\n      return (t === 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b\n    },\n\n    CIRC (t, b, c, d) {\n      return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b\n    },\n\n    ELASTIC (t, b, c, d) {\n      var s = 1.70158; var p = 0; var a = c\n      if (t === 0) return b; if ((t /= d) === 1) return b + c; if (!p) p = d * 0.3\n      if (a < Math.abs(c)) { a = c; var s = p / 4 } else var s = p / (2 * Math.PI) * Math.asin(c / a)\n      return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b\n    },\n\n    BACK (t, b, c, d, s) {\n      if (s === undefined) s = 1.70158\n      return c * (t /= d) * t * ((s + 1) * t - s) + b\n    }\n  },\n\n  OUT: {\n    QUAD (t, b, c, d) {\n      return -c * (t /= d) * (t - 2) + b\n    },\n\n    CUBIC (t, b, c, d) {\n      return c * ((t = t / d - 1) * t * t + 1) + b\n    },\n\n    QUART (t, b, c, d) {\n      return -c * ((t = t / d - 1) * t * t * t - 1) + b\n    },\n\n    QUINT (t, b, c, d) {\n      return c * ((t = t / d - 1) * t * t * t * t + 1) + b\n    },\n\n    SINE (t, b, c, d) {\n      return c * Math.sin(t / d * (Math.PI / 2)) + b\n    },\n\n    EXPO (t, b, c, d) {\n      return (t === d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b\n    },\n\n    CIRC (t, b, c, d) {\n      return c * Math.sqrt(1 - (t = t / d - 1) * t) + b\n    },\n\n    ELASTIC (t, b, c, d) {\n      var s = 1.70158; var p = 0; var a = c\n      if (t === 0) return b; if ((t /= d) === 1) return b + c; if (!p) p = d * 0.3\n      if (a < Math.abs(c)) { a = c; var s = p / 4 } else var s = p / (2 * Math.PI) * Math.asin(c / a)\n      return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b\n    },\n\n    BACK (t, b, c, d, s) {\n      if (s === undefined) s = 1.70158\n      return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b\n    }\n  },\n\n  IN_OUT: {\n    QUAD (t, b, c, d) {\n      if ((t /= d / 2) < 1) return c / 2 * t * t + b\n      return -c / 2 * ((--t) * (t - 2) - 1) + b\n    },\n\n    CUBIC (t, b, c, d) {\n      if ((t /= d / 2) < 1) return c / 2 * t * t * t + b\n      return c / 2 * ((t -= 2) * t * t + 2) + b\n    },\n\n    QUART (t, b, c, d) {\n      if ((t /= d / 2) < 1) return c / 2 * t * t * t * t + b\n      return -c / 2 * ((t -= 2) * t * t * t - 2) + b\n    },\n    QUINT (t, b, c, d) {\n      if ((t /= d / 2) < 1) return c / 2 * t * t * t * t * t + b\n      return c / 2 * ((t -= 2) * t * t * t * t + 2) + b\n    },\n    SINE (t, b, c, d) {\n      return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b\n    },\n\n    EXPO (t, b, c, d) {\n      if (t === 0) return b\n      if (t === d) return b + c\n      if ((t /= d / 2) < 1) return c / 2 * Math.pow(2, 10 * (t - 1)) + b\n      return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b\n    },\n\n    CIRC (t, b, c, d) {\n      if ((t /= d / 2) < 1) return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b\n      return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b\n    },\n\n    ELASTIC (t, b, c, d) {\n      var s = 1.70158; var p = 0; var a = c\n      if (t === 0) return b; if ((t /= d / 2) === 2) return b + c; if (!p) p = d * (0.3 * 1.5)\n      if (a < Math.abs(c)) { a = c; var s = p / 4 } else var s = p / (2 * Math.PI) * Math.asin(c / a)\n      if (t < 1) return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b\n      return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * 0.5 + c + b\n    },\n\n    BACK (t, b, c, d, s) {\n      if (s === undefined) s = 1.70158\n      if ((t /= d / 2) < 1) return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b\n      return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b\n    }\n  }\n}\n\n/*\n *\n * TERMS OF USE - EASING EQUATIONS\n * \n * Open source under the BSD License. \n * \n * Copyright © 2001 Robert Penner\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, \n * are permitted provided that the following conditions are met:\n * \n * Redistributions of source code must retain the above copyright notice, this list of \n * conditions and the following disclaimer.\n * Redistributions in binary form must reproduce the above copyright notice, this list \n * of conditions and the following disclaimer in the documentation and/or other materials \n * provided with the distribution.\n * \n * Neither the name of the author nor the names of contributors may be used to endorse \n * or promote products derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED \n * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED \n * OF THE POSSIBILITY OF SUCH DAMAGE. \n *\n */\n\nexport default Interpolator\n","class SerialInterpolatorSet {\n  constructor (interpolators) {\n    this.__items = interpolators\n    this.__currentIdx = 0\n  }\n\n  get done () {\n    return this.__currentIdx === this.__items.length\n  }\n\n  reset () {\n    this.__currentIdx = 0\n    this.__items.forEach(item => item.reset())\n  }\n\n  update (deltaTime) {\n    if (this.done) {\n      const lastItem = this.__items[this.__items.length - 1]\n      return lastItem.update(deltaTime)\n    } else {\n      const currentItem = this.__items[this.__currentIdx]\n      const val = currentItem.update(deltaTime)\n      if (currentItem.done) ++this.__currentIdx\n      return val\n    }\n  }\n}\n\nexport default SerialInterpolatorSet\n","class ParallelInterpolatorSet {\n  constructor (interpolators) {\n    this.__items = interpolators\n    this.__done = false\n  }\n\n  get done () {\n    return this.__done\n  }\n\n  reset () {\n    this.__items.forEach(item => item.reset())\n    this.__done = false\n  }\n\n  update (deltaTime) {\n    let allDone = true\n    const vals = this.__items.map(item => {\n      const val = item.update(deltaTime)\n      allDone = allDone && item.done\n      return val\n    })\n    if (allDone) { this.__done = true }\n    return vals\n  }\n}\n\nexport default ParallelInterpolatorSet\n","import Interpolator from '../../interpolators/Interpolator'\nimport SerialInterpolatorSet from '../../interpolators/SerialInterpolatorSet'\nimport ParallelInterpolatorSet from '../../interpolators/ParallelInterpolatorSet'\n\nexport function flipAnimation (gameObject, endAngle) {\n  const startY = gameObject.position.y\n  const midY = startY + 2\n  const endY = midY + 1\n  const jump = new Interpolator(startY, midY, 400)\n  const slowJump = new Interpolator(midY, endY, 400, Interpolator.EASING.OUT.SINE)\n  const stall = new Interpolator(endY, endY, 100)\n  const jumpAnim = new SerialInterpolatorSet([\n    jump,\n    slowJump,\n    stall,\n    slowJump.reverse(Interpolator.EASING.IN.SINE),\n    jump.reverse()\n  ])\n  const slowFlip = new Interpolator(0, 480, 900)\n  const flip = new Interpolator(0, 720, 400)\n  const endFlip = new Interpolator(360, endAngle, 400)\n  const flipAnim = new SerialInterpolatorSet([\n    flip,\n    slowFlip,\n    endFlip\n  ])\n  return new ParallelInterpolatorSet([\n    jumpAnim,\n    flipAnim\n  ])\n}\n","import ControlScript from '../../core/ControlScript'\nimport { flipAnimation } from './animations'\n\nclass ControlCoin extends ControlScript {\n  constructor () {\n    super()\n    this.__flipping = false\n    this.__flipAnimation = null\n    this.__flipResult = null\n    this.__onFlipEnd = null\n  }\n\n  onFlipStart (callback) {\n    this.__onFlipStart = callback\n  }\n\n  onFlipEnd (callback) {\n    this.__onFlipEnd = callback\n  }\n\n  startFlipping (gameObject, context) {\n    const mouse = context.input.mouse\n    if (mouse.isButtonPressed('left')) {\n      this.__flipping = true\n      const heads = Math.random() < 0.5\n      this.__flipAnimation = flipAnimation(gameObject, heads ? 720 : 900)\n      this.__flipResult = { heads, tails: !heads }\n      if (this.__onFlipStart) this.__onFlipStart()\n    }\n  }\n\n  update (gameObject, context) {\n    if (!this.__flipping) this.startFlipping(gameObject, context)\n    else {\n      const [pos, rot] = this.__flipAnimation.update(context.deltaTime)\n      gameObject.position.y = pos[0]\n      gameObject.rotation.x = rot[0]\n      if (this.__flipAnimation.done) {\n        this.__flipping = false\n        if (this.__onFlipEnd) return this.__onFlipEnd(this.__flipResult)\n      }\n    }\n  }\n}\n\nexport default ControlCoin\n","import Model from '../Model'\n\nclass Table extends Model {\n  initialize (vertexShader, fragmentShader) {\n    super.initialize(vertexShader, fragmentShader)\n    const { gl } = this\n    this.attribLocations = {\n      vertPosition: gl.getAttribLocation(this.program, 'vertPosition'),\n      texCoord: gl.getAttribLocation(this.program, 'texCoord')\n    }\n  }\n\n  initializeProperties (height, width, breadth, legHeight, legWidth, legBreadth) {\n    this.height = height\n    this.width = width\n    this.breadth = breadth\n    this.legHeight = legHeight\n    this.legWidth = legWidth\n    this.legBreadh = legBreadth\n  }\n\n  setTexture (texture) {\n    this.texture = texture\n  }\n\n  generateLegVertices (height, width, breadth, halfBaseHeight, halfBaseWidth, halfBaseBreadth, indexOffset = 0) {\n    const halfHeight = height / 2\n    const halfWidth = width / 2\n    const halfBreadth = breadth / 2\n\n    const leg1 = generateOneLegVertices(\n      0, halfBaseWidth - halfWidth, -halfHeight - halfBaseHeight, halfBaseBreadth - halfBreadth\n    )\n    const leg2 = generateOneLegVertices(\n      1, halfBaseWidth - halfWidth, -halfHeight - halfBaseHeight, -halfBaseBreadth + halfBreadth\n    )\n    const leg3 = generateOneLegVertices(\n      2, -halfBaseWidth + halfWidth, -halfHeight - halfBaseHeight, halfBaseBreadth - halfBreadth\n    )\n    const leg4 = generateOneLegVertices(\n      3, -halfBaseWidth + halfWidth, -halfHeight - halfBaseHeight, -halfBaseBreadth + halfBreadth\n    )\n\n    return {\n      vertices: [...leg1.vertices, ...leg2.vertices, ...leg3.vertices, ...leg4.vertices],\n      indices: [...leg1.indices, ...leg2.indices, ...leg3.indices, ...leg4.indices]\n    }\n\n    function generateOneLegVertices (legNumber, tx, ty, tz) {\n      const vertices = [\n        halfWidth + tx, -halfHeight + ty, -halfBreadth + tz, 0.0, 0.0,\n        halfWidth + tx, halfHeight + ty, -halfBreadth + tz, 0.1, 0.1,\n        -halfWidth + tx, -halfHeight + ty, -halfBreadth + tz, 0.0, 0.0,\n        -halfWidth + tx, halfHeight + ty, -halfBreadth + tz, 0.1, 0.1,\n\n        halfWidth + tx, -halfHeight + ty, halfBreadth + tz, 0.0, 0.0,\n        halfWidth + tx, halfHeight + ty, halfBreadth + tz, 0.1, 0.1,\n        -halfWidth + tx, -halfHeight + ty, halfBreadth + tz, 0.0, 0.0,\n        -halfWidth + tx, halfHeight + ty, halfBreadth + tz, 0.1, 0.1,\n\n        halfWidth + tx, halfHeight + ty, halfBreadth + tz, 0.1, 0.1,\n        halfWidth + tx, halfHeight + ty, -halfBreadth + tz, 0.0, 0.0,\n        -halfWidth + tx, halfHeight + ty, -halfBreadth + tz, 0.0, 0.0,\n        -halfWidth + tx, halfHeight + ty, halfBreadth + tz, 0.1, 0.1,\n\n        halfWidth + tx, -halfHeight + ty, halfBreadth + tz, 0.0, 0.0,\n        halfWidth + tx, -halfHeight + ty, -halfBreadth + tz, 0.1, 0.1,\n        -halfWidth + tx, -halfHeight + ty, -halfBreadth + tz, 0.0, 0.0,\n        -halfWidth + tx, -halfHeight + ty, halfBreadth + tz, 0.1, 0.1,\n\n        halfWidth + tx, halfHeight + ty, -halfBreadth + tz, 0.0, 0.0,\n        halfWidth + tx, halfHeight + ty, halfBreadth + tz, 0.1, 0.1,\n        halfWidth + tx, -halfHeight + ty, -halfBreadth + tz, 0.0, 0.0,\n        halfWidth + tx, -halfHeight + ty, halfBreadth + tz, 0.1, 0.1,\n\n        -halfWidth + tx, halfHeight + ty, -halfBreadth + tz, 0.0, 0.0,\n        -halfWidth + tx, halfHeight + ty, halfBreadth + tz, 0.1, 0.1,\n        -halfWidth + tx, -halfHeight + ty, -halfBreadth + tz, 0.0, 0.0,\n        -halfWidth + tx, -halfHeight + ty, halfBreadth + tz, 0.1, 0.1\n      ]\n\n      const indices = [\n        1, 2, 3, 2, 1, 0, // BACKWARD\n        4, 5, 6, 7, 6, 5, // FORWARD\n        8, 9, 10, 10, 11, 8, // TOP\n        12, 15, 14, 14, 13, 12, // BOTTOM\n        16, 17, 18, 19, 18, 17, // LEFT\n        21, 22, 23, 22, 21, 20 // RIGHT\n      ]\n      const numVertices = (vertices.length / 5)\n      const correctedIndices = indices.map(idx => idx + indexOffset + (legNumber * numVertices))\n      return { vertices, indices: correctedIndices }\n    }\n  }\n\n  generateVertices (legHeight, legWidth, legBreadth, baseHeight, baseWidth, baseBreadth) {\n    const halfHeight = baseHeight / 2\n    const halfWidth = baseWidth / 2\n    const halfBreadth = baseBreadth / 2\n\n    const vertices = [\n      halfWidth, -halfHeight, -halfBreadth, 0.0, 0.0,\n      halfWidth, halfHeight, -halfBreadth, 1.0, 1.0,\n      -halfWidth, -halfHeight, -halfBreadth, 0.0, 0.0,\n      -halfWidth, halfHeight, -halfBreadth, 1.0, 1.0,\n\n      halfWidth, -halfHeight, halfBreadth, 0.0, 0.0,\n      halfWidth, halfHeight, halfBreadth, 1.0, 1.0,\n      -halfWidth, -halfHeight, halfBreadth, 0.0, 0.0,\n      -halfWidth, halfHeight, halfBreadth, 1.0, 1.0,\n\n      halfWidth, halfHeight, halfBreadth, 1.0, 1.0,\n      halfWidth, halfHeight, -halfBreadth, 0.0, 0.0,\n      -halfWidth, halfHeight, -halfBreadth, 0.0, 0.0,\n      -halfWidth, halfHeight, halfBreadth, 1.0, 1.0,\n\n      halfWidth, -halfHeight, halfBreadth, 0.0, 0.0,\n      halfWidth, -halfHeight, -halfBreadth, 1.0, 1.0,\n      -halfWidth, -halfHeight, -halfBreadth, 0.0, 0.0,\n      -halfWidth, -halfHeight, halfBreadth, 1.0, 1.0,\n\n      halfWidth, halfHeight, -halfBreadth, 0.0, 0.0,\n      halfWidth, halfHeight, halfBreadth, 1.0, 1.0,\n      halfWidth, -halfHeight, -halfBreadth, 0.0, 0.0,\n      halfWidth, -halfHeight, halfBreadth, 1.0, 1.0,\n\n      -halfWidth, halfHeight, -halfBreadth, 0.0, 0.0,\n      -halfWidth, halfHeight, halfBreadth, 1.0, 1.0,\n      -halfWidth, -halfHeight, -halfBreadth, 0.0, 0.0,\n      -halfWidth, -halfHeight, halfBreadth, 1.0, 1.0\n    ]\n\n    const indices = [\n      1, 2, 3, 2, 1, 0, // BACKWARD\n      4, 5, 6, 7, 6, 5, // FORWARD\n      8, 9, 10, 10, 11, 8, // TOP\n      12, 15, 14, 14, 13, 12, // BOTTOM\n      16, 17, 18, 19, 18, 17, // LEFT\n      21, 22, 23, 22, 21, 20 // RIGHT\n    ]\n\n    const legData = this.generateLegVertices(\n      legHeight, legWidth, legBreadth,\n      halfHeight, halfWidth, halfBreadth,\n      vertices.length / 5\n    )\n\n    return {\n      vertices: [...vertices, ...legData.vertices],\n      indices: [...indices, ...legData.indices]\n    }\n  }\n\n  draw () {\n    const { gl } = this\n    const width = this.width || 1\n    const breadth = this.breadth || 1\n    const height = this.height || 1\n    const legHeight = this.legHeight || 3\n    const legBreadh = this.legBreadh || 0.5\n    const legWidth = this.legWidth || 0.5\n    const { vertices, indices } = this.generateVertices(legHeight, legWidth, legBreadh, height, width, breadth)\n    this._createBuffer(vertices)\n    this._createElementBuffer(indices)\n\n    gl.vertexAttribPointer(\n      this.attribLocations.vertPosition,\n      3,\n      gl.FLOAT,\n      gl.FALSE,\n      5 * Float32Array.BYTES_PER_ELEMENT,\n      0\n    )\n    gl.vertexAttribPointer(\n      this.attribLocations.texCoord,\n      2,\n      gl.FLOAT,\n      gl.FALSE,\n      5 * Float32Array.BYTES_PER_ELEMENT,\n      3 * Float32Array.BYTES_PER_ELEMENT\n    )\n    gl.enableVertexAttribArray(this.attribLocations.vertPosition)\n    gl.enableVertexAttribArray(this.attribLocations.texCoord)\n    gl.bindTexture(gl.TEXTURE_2D, this.texture.location)\n    gl.activeTexture(gl.TEXTURE0)\n    gl.drawElements(gl.TRIANGLES, indices.length, gl.UNSIGNED_SHORT, 0)\n  }\n}\n\nexport default Table\n","import GameObject from '../../core/GameObject'\nimport VertexShader from '../../core/shaders/VertexShader'\nimport FragmentShader from '../../core/shaders/FragmentShader'\nimport vertexShaderSrc from './shader.vert'\nimport fragmentShaderSrc from './shader.frag'\nimport TableModel from '../../models/Table'\n\nclass Table extends GameObject {\n  initialize (height, width, breadth, legHeight, legWidth, legBreadth) {\n    const vertexShader = new VertexShader(this.context, vertexShaderSrc)\n    const fragmentShader = new FragmentShader(this.context, fragmentShaderSrc)\n    const model = new TableModel(this.context)\n    model.initialize(vertexShader, fragmentShader)\n    model.initializeProperties(height, width, breadth, legHeight, legWidth, legBreadth)\n    this._setModel(model)\n  }\n\n  setTexture (textureImage) {\n    this.__model.setTexture(textureImage)\n  }\n}\n\nexport default Table\n","const template = document.createElement('template')\n\ntemplate.innerHTML = `\n<style>\n  :host {\n    display: block;\n    overflow: hidden;\n  }\n\n  h1 {\n    color: #3388FF;\n    text-align: center;\n    margin: 0;\n    user-select: none;\n    transition: 1s all;\n    opacity: 0;\n    font-size: 2rem;\n    transform: scale(1);\n    font-weight: normal;\n    background: #FFFFFF;\n    padding: 1rem 0;\n  }\n\n  h1.active {\n    opacity: 100;\n    transform: scale(1.5);\n  }\n\n</style>\n<h1>\n  It's <span id='result'> </span>!!\n</h1>\n`\n\nclass ResultMessage extends window.HTMLElement {\n  static get observedAttributes () {\n    return ['result']\n  }\n\n  constructor () {\n    super()\n    this._shadowRoot = this.attachShadow({ mode: 'open' })\n    this._shadowRoot.appendChild(template.content.cloneNode(true))\n    this.$root = this._shadowRoot.querySelector('h1')\n    this.$result = this._shadowRoot.querySelector('#result')\n  }\n\n  connectedCallback () {\n    this._render()\n  }\n\n  attributeChangedCallback (name, oldValue, newValue) {\n    switch (name) {\n      case 'result':\n        this._result = newValue\n    }\n    this._render()\n  }\n\n  get result () {\n    return this.getAttribute('result')\n  }\n\n  set result (value) {\n    this.setAttribute('result', value)\n  }\n\n  get resultText () {\n    switch (this._result) {\n      case 'heads': return 'Heads'\n      case 'tails': return 'Tails'\n      default: return 'Unknown'\n    }\n  }\n\n  _render () {\n    if (this._result) {\n      this.$result.innerText = this.resultText\n      this.$root.classList.add('active')\n    } else {\n      this.$root.classList.remove('active')\n    }\n  }\n}\n\nwindow.customElements.define('result-message', ResultMessage)\nexport default ResultMessage\n","const template = document.createElement('template')\n\ntemplate.innerHTML = `\n<style>\n  :host {\n    display: block;\n    overflow: hidden;\n  }\n\n  h1 {\n    color: #335599;\n    text-align: center;\n    user-select: none;\n    width: auto;\n    font-size: 2rem;\n    animation: pulsate 0.6s infinite alternate;\n    font-weight: normal;\n    margin: 0;\n  }\n\n  h2 {\n    color: #666666;\n    text-align: center;\n    user-select: none;\n    width: auto;\n    font-size: 1.3rem;\n    font-weight: normal;\n    margin: 0.5rem 0 0 0;\n  }\n\n  .question {\n    position: absolute;\n    animation: slide-down 1s 1;\n    animation-fill-mode: both;\n  }\n\n  @keyframes slide-down {\n    from {transform: scale(1.5) rotateY(360deg);}\n    to {left: scale(1) rotateY(0)}\n  }\n\n  @keyframes pulsate {\n    from {transform: scale(1)}\n    to {transform: scale(1.05)}\n  }\n</style>\n<h1>\n  Heads or Tails<span class='question'>?</span>\n</h1>\n<h2>\n  Click to flip!\n</h2>\n`\n\nclass ClickPrompt extends window.HTMLElement {\n  constructor () {\n    super()\n    this._shadowRoot = this.attachShadow({ mode: 'open' })\n    this._shadowRoot.appendChild(template.content.cloneNode(true))\n  }\n}\n\nwindow.customElements.define('click-prompt', ClickPrompt)\nexport default ClickPrompt\n","const template = document.createElement('template')\n\n// Source: https://iconmonstr.com/arrow-19-svg/\nconst arrowSvg = `\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n    <path d=\"M12.068.016l-3.717 3.698 5.263 5.286h-13.614v6h13.614l-5.295 5.317 3.718 3.699 11.963-12.016z\"/>\n  </svg>\n`\n// Source: https://iconmonstr.com/mouse-4-svg/\nconst mouseSvg = `\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n    <path d=\"M16 2c1.103 0 2 .897 2 2v12c0 3.309-2.691 6-6 6s-6-2.691-6-6v-12c0-1.103.897-2 2-2h8zm4 2c0-2.209-1.791-4-4-4h-8c-2.209 0-4 1.791-4 4v12c0 4.418 3.582 8 8 8s8-3.582 8-8v-12zm-7 1c0-.552-.447-1-1-1s-1 .448-1 1v4c0 .552.447 1 1 1s1-.448 1-1v-4z\"/>\n  </svg>\n`\n\ntemplate.innerHTML = `\n  <style>\n    .camera-text { color: #335599; font-weight: bold; padding: 0 0.5rem; }\n    .controls-container { opacity: 0.7; padding: 0.5rem; display: flex; }\n    .control-row { text-align: center; padding: 0.1rem 0; }\n    .arrow { display: inline-block; padding: 0.3rem; background: #335599; border-radius: 0.2rem; }\n    .arrow > svg { fill: #FFFFFF; width: 0.8rem; height: 0.8rem;}\n    .right { transform: rotate(0deg); }\n    .left { transform: rotate(180deg); }\n    .up { transform: rotate(270deg); }\n    .down { transform: rotate(90deg); }\n    .mouse { padding: 0 0.5rem; transform: rotate(-10deg); }\n    .mouse > svg { width: 3rem; height: 3.3rem; fill: #335599; }\n  </style>\n  <div class=\"control-info-container\">\n    <div class=\"controls-container\">\n        <div>\n        <div class=\"control-row\">\n            <div class=\"arrow up\">\n            ${arrowSvg}\n            </div>\n        </div>\n        <div class=\"control-row\">\n            <div class=\"arrow left\">\n                ${arrowSvg}\n            </div>\n            <div class=\"arrow down\">\n                ${arrowSvg}\n            </div>\n            <div class=\"arrow right\">\n                ${arrowSvg}\n            </div>\n        </div>\n        </div>\n        <div>\n        <div class=\"mouse\">\n            ${mouseSvg}\n        </div>\n        </div>\n    </div>\n    <div class=\"camera-text\" > Camera Controls </div>\n  </div>\n`\n\nclass ControlInfo extends window.HTMLElement {\n  constructor () {\n    super()\n    this._shadowRoot = this.attachShadow({ mode: 'open' })\n    this._shadowRoot.appendChild(template.content.cloneNode(true))\n  }\n}\n\nwindow.customElements.define('control-info', ControlInfo)\nexport default ControlInfo\n","import './components/ResultMessage'\nimport './components/ClickPrompt'\nimport './components/ControlInfo'\nimport './style.css'\n\nclass UI {\n  constructor () {\n    this.__initialize()\n    this.__sizeOverlay = this.__sizeOverlay.bind(this)\n    this.resetResultMessage = this.resetResultMessage.bind(this)\n    window.addEventListener('resize', this.__sizeOverlay)\n    this.__sizeOverlay()\n  }\n\n  __initialize () {\n    const overlay = document.createElement('div')\n    overlay.id = 'overlay'\n    const message = document.createElement('result-message')\n    const clickPrompt = document.createElement('click-prompt')\n    overlay.appendChild(clickPrompt)\n    overlay.appendChild(message)\n    document.body.appendChild(overlay)\n    this.__overlay = overlay\n    this.__message = message\n    this.__clickPrompt = clickPrompt\n    this.showControlInfo()\n  }\n\n  __sizeOverlay () {\n    const overlay = this.__overlay\n    overlay.style.width = window.innerWidth\n    overlay.style.height = window.innerHeight\n  }\n\n  showClickPrompt (show = true) {\n    if (show) {\n      this.__clickPrompt.classList.remove('hidden')\n    } else {\n      this.__clickPrompt.classList.add('hidden')\n    }\n  }\n\n  resetResultMessage () {\n    this.__message.result = ''\n    this.showClickPrompt(true)\n  }\n\n  displayResultMessage (result) {\n    this.__message.result = result\n    this.showClickPrompt(false)\n    if (this.__messageTimeout) window.clearTimeout(this.__messageTimeout)\n    this.__messageTimeout = window.setTimeout(this.resetResultMessage, 2000)\n  }\n\n  showControlInfo () {\n    const controlInfo = document.createElement('control-info')\n    this.__overlay.appendChild(controlInfo)\n  }\n\n  destroy () {\n    window.removeEventListener('resize', this.__sizeOverlay)\n  }\n}\n\nexport default UI\n","import ControlScript from '../../core/ControlScript'\n\nclass ControlCamera extends ControlScript {\n  constructor (center, startRadius = 3, startAngleHorz = Math.PI / 2) {\n    super()\n    this.__center = center\n    this.__radius = startRadius\n    this.__angleHorz = startAngleHorz\n  }\n\n  update (gameObject, context) {\n    const mouse = context.input.mouse\n    const keyboard = context.input.keyboard\n    const scroll = mouse.getScroll()\n    const delta = context.deltaTime / 1000\n    this.__radius = Math.max(1, this.__radius - (scroll.y * 0.05))\n    if (keyboard.isKeyPressed('ArrowLeft')) {\n      this.__angleHorz += 1 * delta\n    }\n\n    if (keyboard.isKeyPressed('ArrowRight')) {\n      this.__angleHorz -= 1 * delta\n    }\n\n    if (keyboard.isKeyPressed('ArrowUp')) {\n      gameObject.position.y += 3 * delta\n    }\n\n    if (keyboard.isKeyPressed('ArrowDown')) {\n      gameObject.position.y -= 3 * delta\n    }\n\n    gameObject.position.x = this.__center.x + this.__radius * Math.cos(this.__angleHorz)\n    gameObject.position.z = this.__center.z + this.__radius * Math.sin(this.__angleHorz)\n\n    gameObject.lookAt([this.__center.x, this.__center.y, this.__center.z])\n  }\n}\n\nexport default ControlCamera\n","import AppContext from './core/AppContext'\nimport Coin from './gameObjects/Coin'\nimport Scene from './core/Scene'\nimport Camera from './core/Camera'\nimport Texture from './core/Texture'\nimport ControlCoin from './scripts/ControlCoin'\nimport Table from './gameObjects/Table'\nimport UI from './UI'\nimport ControlCamera from './scripts/ControlCamera'\n\nfunction main () {\n  const ui = new UI()\n  const canvas = document.getElementById('screen')\n  canvas.width = window.innerWidth\n  canvas.height = window.innerHeight\n\n  const context = new AppContext(canvas)\n  context.ui = ui\n  const scene = setupScene(context)\n  const coin = createCoin(context)\n  const table = createTable(context)\n  scene.camera.addControlScript('controlCamera', new ControlCamera(coin.position))\n  scene.addGameObject(table)\n  scene.addGameObject(coin)\n\n  const loop = function () {\n    scene.update()\n    scene.draw()\n    window.requestAnimationFrame(loop)\n  }\n\n  loop()\n}\n\nfunction setupScene (context) {\n  const scene = new Scene(context)\n  scene.setClearColor([0.75, 0.85, 0.8, 1.0])\n  const camera = new Camera(context)\n  scene.setCamera(camera)\n  camera.setPosition([0, 5, 0])\n  return scene\n}\n\nfunction createTable (context) {\n  const table = new Table(context)\n  table.initialize(0.5, 10, 7, 3, 0.5, 0.5)\n  const texture = new Texture(context)\n  texture.loadImage('textures/wood.jpg', 3)\n  table.setTexture(texture)\n  table.position.y = -0.32\n  return table\n}\n\nfunction createCoin (context) {\n  const { ui } = context\n  const texture = new Texture(context)\n  texture.loadImage('textures/2rscoin.jpg', 3)\n  const coin = new Coin(context)\n  const flipScript = new ControlCoin()\n  flipScript.onFlipStart(() => {\n    ui.showClickPrompt(false)\n  })\n  flipScript.onFlipEnd(({ heads }) => {\n    if (heads) {\n      ui.displayResultMessage('heads')\n    } else {\n      ui.displayResultMessage('tails')\n    }\n  })\n  coin.addControlScript('controlCoin', flipScript)\n  coin.initialize(0.7, 0.1, 50)\n  coin.setTexture(texture)\n  return coin\n}\n\nwindow.onload = main\n"]}